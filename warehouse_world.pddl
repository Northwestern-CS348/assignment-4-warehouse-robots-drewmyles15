(define (domain warehouse)
	(:requirements :typing)
	(:types robot pallette - bigobject
        	location shipment order saleitem)

  	(:predicates
    	(ships ?s - shipment ?o - order)
    	(orders ?o - order ?si - saleitem)
    	(unstarted ?s - shipment)
    	(started ?s - shipment)
    	(complete ?s - shipment)
    	(includes ?s - shipment ?si - saleitem)

    	(free ?r - robot)
    	(has ?r - robot ?p - pallette)

    	(packing-location ?l - location)
    	(packing-at ?s - shipment ?l - location)
    	(available ?l - location)
    	(connected ?l - location ?l - location)
    	(at ?bo - bigobject ?l - location)
    	(no-robot ?l - location)
    	(no-pallette ?l - location)

    	(contains ?p - pallette ?si - saleitem)
  )

    (:action startShipment
        :parameters (?s - shipment ?o - order ?l - location)
        :precondition (and (unstarted ?s) 
                        (not (complete ?s)) 
                        (ships ?s ?o) 
                        (available ?l) 
                        (packing-location ?l))
        :effect (and (started ?s) 
                (packing-at ?s ?l) 
                (not (unstarted ?s)) 
                (not (available ?l)))
   )
    (:action robotMove
        :parameters (?loc1 ?loc2 - location ?rob - robot)
        :precondition (and (free ?rob) 
                        (at ?rob ?loc1) 
                        (connected ?loc1 ?loc2))    
        :effect (and (no-robot ?loc1) 
                (not (no-robot ?loc2)) 
                (not (at ?rob ?loc1)) 
                (at ?rob ?loc2))
    )
    
    (:action robotMoveWithPallette
        :parameters (?loc1 ?loc2 - location ?rob - robot ?p - pallette)
        :precondition (and (free ?rob) 
                        (at ?p ?loc1) 
                        (at ?rob ?loc1) 
                        (connected ?loc1 ?loc2) 
                        (no-pallette ?loc2))
        :effect (and (no-robot ?loc1) 
                    (not (no-robot ?loc2)) 
                    (at ?p ?loc2) 
                    (not (at ?p ?loc1)) 
                    (at ?rob ?loc2) 
                    (not (at ?rob ?loc1)) 
                    (not (no-pallette ?loc2))
                    (no-pallette ?loc1))
    )
    
    (:action moveItemFromPalletteToShipment
        :parameters (?l - location ?s - shipment ?si - saleitem ?p - pallette ?o - order)
        :precondition (and (contains ?p ?si) 
                        (at ?p ?l) 
                        (packing-location ?l) 
                        (ships ?s ?o) 
                        (orders ?o ?si))
        :effect (and (includes ?s ?si)
                    (not (contains ?p ?si)))
    )
    (:action completeShipment
        :parameters (?s - shipment ?o - order ?l - location)
        :precondition (and (started ?s) 
                        (ships ?s ?o) 
                        (packing-location ?l) 
                        (packing-at ?s ?l))
        :effect (and (complete ?s) 
                (not (started ?s)) 
                (not (packing-at ?s ?l)))
    )

)
